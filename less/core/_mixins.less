// =========== Mixins
.animation (@name: true, @duration: true, @timing_function: true, @delay: false, @iteration_count: false, @direction: false) {
    .name() when (@name) {
        -webkit-animation-name: @name; -moz-animation-name: @name; -ms-animation-name: @name;
    }
    .name;
    .duration() when (@duration) {
        -webkit-animation-duration: @duration; -moz-animation-duration: @duration; -ms-animation-duration: @duration;
    }
    .duration;
    .timing_function() when (@timing_function) {
        -webkit-animation-timing-function: @timing_function; -moz-animation-timing-function: @timing_function;  -ms-animation-timing-function: @timing_function;
    }
    .timing_function;
    .delay() when (@delay) {
        -webkit-animation-delay: @delay; -moz-animation-delay: @delay; -ms-animation-delay: @delay;
    }
    .delay;
    .iteration_count() when (@iteration_count) {
        -webkit-animation-iteration-count: @iteration_count; -moz-animation-iteration-count: @iteration_count; -ms-animation-iteration-count: @iteration_count;
    }
    .iteration_count;
    .direction() when (@direction) {
        -webkit-animation-direction: @direction; -moz-animation-direction: @direction; -ms-animation-direction: @direction;
    }
    .direction;
}

.backface-visibility(@backface) {
    -webkit-backface-visibility: @backface;
    -moz-backface-visibility: @backface;
    -ms-backface-visibility: @backface;
    backface-visibility: @backface;
}

.background-clip(@clip) {
    -webkit-background-clip: @clip;
    -moz-background-clip: @clip;
    -o-background-clip: @clip;
    background-clip: @clip;
}

.border-radius(@radius) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    -ms-border-radius: @radius;
    -o-border-radius: @radius;
    border-radius: @radius;
}

.box-shadow(@shadow) {
    -webkit-box-shadow: @shadow;
    -moz-box-shadow: @shadow;
    -o-box-shadow: @shadow;
    box-shadow: @shadow;
}

.box-sizing(@box) {
    -webkit-box-sizing: @box;
    -moz-box-sizing: @box;
    -ms-box-sizing: @box;
    -o-box-sizing: @box;
    box-sizing: @box;
}

@b_one: ~"(@{breakpoint-property}: @{breakpoint-one})";
@b_two: ~"(@{breakpoint-property}: @{breakpoint-two})";
@b_three: ~"(@{breakpoint-property}: @{breakpoint-three})";
@b_four: ~"(@{breakpoint-property}: @{breakpoint-three})";
@b_five: ~"(@{breakpoint-property}: @{breakpoint-three})";

/* WARNING: replacement of the @content sass variable, implement .content() { ... } when using .breakpoint(@point) */
.breakpoint(@point) {
    .one() when (@point = "one") {
        @media @b_one { .content(); }
    }
    .one;
    .two() when (@point = "two") {
        @media @b_two { .content(); }
    }
    .two;
    .three() when (@point = "three") {
        @media @b_three { .content(); }
    }
    .three;
    .four() when (@point = "four") {
        @media @b_four { .content(); }
    }
    .four;
    .five() when (@point = "five") {
        @media @b_five { .content(); }
    }
    .five;
}

.filter(@filter) {
    -webkit-filter: @filter;
    -moz-filter: @filter;
    -o-filter: @filter;
    filter: @filter;
}

.perspective(@perspective) {
    -webkit-perspective: @perspective;
    -moz-perspective: @perspective;
    perspective: @perspective;
}

.transform(@transform) {
    -webkit-transform: @transform;
    -moz-transform: @transform;
    -ms-transform: @transform;
    -o-transform: @transform;
    transform: @transform;
}

.transition(@transition) {
    -webkit-transition: @transition;
    -moz-transition: @transition;
    -o-transition: @transition;
    transition: @transition;
}

.columns(@count, @gap) {
    -webkit-column-count: @count;
    -webkit-column-gap : @gap;
    -moz-column-count: @count;
    -moz-column-gap: @gap;
    -o-column-count: @count;
    -o-column-gap: @gap;
    column-count: @count;
    column-gap: @gap;
}

.columns-rule(@size, @style, @color) {
    -webkit-column-rule-width: @size;
    -webkit-column-rule-style: @style;
    -webkit-column-rule-color: @color;
    -moz-column-rule-width: @size;
    -moz-column-rule-style: @style;
    -moz-column-rule-color: @color;
    -o-column-rule-width: @size;
    -o-column-rule-style: @style;
    -o-column-rule-color: @color;
    column-rule-width: @size;
    column-rule-style: @style;
    column-rule-color: @color;
}

.gradient(@side, @start, @end) {
    background-color: @end;
    background-image: -webkit-linear-gradient(@side, @start, @end);
    background-image: -moz-linear-gradient(@side, @start, @end);
    background-image: -ms-linear-gradient(@side, @start, @end);
    background-image: -o-linear-gradient(@side, @start, @end);
    background-image: linear-gradient(@side, @start, @end);
}

.gradient-ie(@start, @end) {
    *zoom: 1;
    filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{@start}', endColorstr='#{@end}');
    -ms-filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#{@start}', endColorstr='#{@end}');
}